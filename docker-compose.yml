version: "3.9"

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: MatiasUCD
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U MatiasUCD"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    env_file:
      - ./apps/backend/.env.production
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    ports:
      - "80:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    depends_on:
      - backend

  ml-api:
    build:
      context: .
      dockerfile: ./data/Dockerfile
    ports:
      - "5050:5050"
    volumes:
      - ./data:/app/data
    environment:
      - FLASK_ENV=development
    networks:
      - app-network

networks:
  app-network:

volumes:
  postgres_data:
  redis_data:
